#BlueJ class context
comment0.params=aoAddition\ aoSubstraction\ aoMultiplication\ aoDivision\ bracketDepth\ substitutions\ digits\ oPositive\ wFraction
comment0.target=TERM(boolean,\ boolean,\ boolean,\ boolean,\ int,\ int,\ int,\ boolean,\ boolean)
comment0.text=\n\ TERM\ Constructor\n\n\ @param\ aoAddition\ set\ to\ true\ if\ additions\ should\ be\ part\ of\ the\ expression\n\ @param\ aoSubstraction\ set\ to\ true\ if\ substractions\ should\ be\ part\ of\ the\ expression\n\ @param\ aoMultiplication\ set\ to\ true\ if\ multiplications\ should\ be\ part\ of\ the\ expression\n\ @param\ aoDivision\ set\ to\ true\ if\ divisions\ should\ be\ part\ of\ the\ expression\n\ @param\ bracketDepth\ self\ explaining\ -\ sets\ the\ max\ depth\ of\ brackts\ in\ the\ expression\n\ @param\ substitutions\ count\ of\ substitution\ cycles\ a\ number\ in\ the\ expression\ has\ to\ go\ through\n\ @param\ digits\ max\ dagit\ length\ of\ any\ number\ in\ the\ expression\n\ @param\ oPositive\ set\ to\ true\ if\ only\ positive\ numbers\ should\ be\ allowed\ \ \ --CURRENTLY\ DISABLED--\n\ @param\ wFraction\ set\ to\ true\ if\ the\ expression\ should\ contain\ fractions\ --CURRENTLY\ DISABLED--\n
comment1.params=newKnoten
comment1.target=void\ wurzelSetzen(DATENKNOTEN)
comment1.text=\n\ method\ wurzelSetzen\n\n\ @param\ newKnoten\ root\ of\ the\ binary\ tree\n
comment10.params=
comment10.target=void\ infix()
comment10.text=\n\ method\ infix\n\ method\ to\ traverse\ the\ tree\ and\ print\ out\ the\ expression\n
comment11.params=stellenZahl\ nurPositiv\ mitBruechen
comment11.target=int\ ergebnisErzeugen(int,\ boolean,\ boolean)
comment11.text=\n\ method\ ergebnisErzeugen\n\n\ @param\ stellenZahl\ Ein\ Parameter\n\ @param\ nurPositiv\ Ein\ Parameter\n\ @param\ mitBruechen\ Ein\ Parameter\n\ @return\ Der\ R\u00FCckgabewert\n
comment2.params=
comment2.target=void\ pr\u00E4fix()
comment2.text=\n\ method\ pr\u00E4fix\n\n
comment3.params=plus\ min\ mul\ div
comment3.target=java.lang.String\ getRechenzeichen(boolean,\ boolean,\ boolean,\ boolean)
comment3.text=\n\ method\ getRechenzeichen\n\n\ @param\ plus\ addition\ allowed\n\ @param\ min\ substraction\ allowed\n\ @param\ mul\ multiplication\ allowed\n\ @param\ div\ division\ allowed\n\ @return\ the\ randomly\ selcted\ operator\n
comment4.params=
comment4.target=int\ gibH\u00F6he()
comment4.text=\n\ method\ gibH\u00F6he\n\n\ @return\ height\ of\ the\ binary\ tree\n
comment5.params=sub
comment5.target=int[]\ splitSubs(int)
comment5.text=\n\ Methode\ splitSubs\n\n\ @param\ sub\ currently\ left\ substitutions\n\ @return\ array\ of\ substitutions\ for\ leftNext\ and\ rightNext\n
comment6.params=aoAddition\ aoSubstraction\ aoMultiplication\ aoDivision\ bracketDepth\ substitutions\ digits\ oPositive\ erg
comment6.target=void\ createSub(boolean,\ boolean,\ boolean,\ boolean,\ int,\ int,\ int,\ boolean,\ double)
comment6.text=\n\ \n\ \ \ \ public\ void\ sortiertEinf\u00FCgen(OPERATOR\ e)\ {\n\ \ \ \ wurzel.sortiertEinf\u00FCgen(e);\n\ \ \ \ }\n
comment7.params=min\ max
comment7.target=int\ getRand(int,\ int)
comment7.text=\n\ method\ getRand\n\n\ @param\ min\ minium\ random\ number\n\ @param\ max\ maximum\ random\ number\n\ @return\ random\ number\n
comment8.params=
comment8.target=int\ gibAnzahl()
comment8.text=\n\ method\ gibAnzahl\n\n\ @return\ returns\ number\ of\ elements\ in\ the\ binary\ tree\n
comment9.params=
comment9.target=boolean\ isAVL()
comment9.text=\n\ method\ isAVL\n\n\ @return\ boolean\ returns\ wether\ the\ binary\ tree\ is\ AVL\ conform\ or\ not\n
numComments=12
